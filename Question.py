
class TestCase:
    def __init__(self, inputs, output):
        self.inputs = inputs
        self.output = output


class Question:
    def __init__(self, name, description, test_cases=None):
        self.name = name
        self.description = description
        self.test_cases = [] if test_cases is None else test_cases

    def add_case(self, inputs, output):
        self.test_cases.append(TestCase(inputs, output))


question1 = Question("Beginners question", "Input two integers. If the sum is greater than 9, throw an Exception," +
                     " else print the sum")

question1.add_case("1\n2", "3")
question1.add_case("4\n5", "9")
question1.add_case("10\n12", "null")
question1.add_case("3\n8", "null")
question1.add_case("-10\n20", "null")

question2 = Question("Even & Odd", "Input Integer N. If N is even, throw an exception else print the first N even " +
                                   "numbers greater than 0")

question2.add_case("3", "2\n4\n6")
question2.add_case("4", "null")
question2.add_case("5", "2\n4\n6\n8\n10")
question2.add_case("2", "null")
question2.add_case("7", "2\n4\n6\n8\n10\n12\n14")

question3 = Question("Multiples of 3 and 5", "If we list all the natural numbers below 10 that are multiples of 3 or" +
                                             " 5, we get 3, 5, 6 and 9. The sum of these multiples is 23. Find the s" +
                                             "um of all the multiples of 3 or 5 below 1000.")

question3.add_case("", "233168")

q4 = "Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be: 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ... By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms."
question4 = Question("Even Fibonnacci numbers", q4)

question4.add_case("", "4613732")
